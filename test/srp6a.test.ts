import { SRPParameters } from "../src/parameters";
import { SRPRoutines } from "../src/routines";
import { SRPClientSession } from "../src/session-client";
import { SRPServerSession } from "../src/session-server";
import {
  createVerifierAndSalt,
  generateRandomString,
  HashWordArray,
  stringToArrayBuffer,
} from "../src/utils";
import { test } from "./tests";

const testParameters = new SRPParameters();
class SRP6aRoutines extends SRPRoutines {
  public computeIdentityHash(I: string, P: string): HashWordArray {
    return this.hash(stringToArrayBuffer(`${I}:${P}`));
  }
}
const srp6aRoutines = new SRP6aRoutines(testParameters);

test("#SRP6aSession success", (t) => {
  t.plan(1);

  const testUsername = generateRandomString(10);
  const testPassword = generateRandomString(15);

  // Sign up
  // salt and verifier are generated by client during signup
  // verifier is read from server storage for server.step1
  const { s: salt, v: verifier } = createVerifierAndSalt(
    srp6aRoutines,
    testUsername,
    testPassword,
  );

  // Sign in
  const srp6aClient = new SRPClientSession(srp6aRoutines).step1(
    testUsername,
    testPassword,
  );

  // server gets identifier from client, salt+verifier from db (from signup)
  const server = new SRPServerSession(srp6aRoutines).step1(
    testUsername,
    salt,
    verifier,
  );

  // client gets challenge B from server step1 and sends prove M1 to server
  const srp6aClient_step2 = srp6aClient.step2(salt, server.B);

  // servers checks client prove M1 and sends server prove M2 to client
  const M2 = server.step2(srp6aClient_step2.A, srp6aClient_step2.M1);

  // client ensures server identity
  srp6aClient_step2.step3(M2);
  t.pass(`user:${testUsername}, password:${testPassword}, salt: ${salt}`);
});

test("#SRP6aSession config mismatch", (t) => {
  t.plan(1);

  const testUsername = "testUser";
  const testPassword = "testPassword";

  const defaultRoutines = new SRPRoutines(testParameters);

  // Sign up is done using SRP6a verifier
  const { s: salt, v: verifier } = createVerifierAndSalt(
    srp6aRoutines,
    testUsername,
    testPassword,
  );

  // Sign in
  const defaultClient = new SRPClientSession(defaultRoutines).step1(
    testUsername,
    testPassword,
  );

  // server gets identifier from client, salt+verifier from db (from signup)
  const serverSession = new SRPServerSession(srp6aRoutines).step1(
    testUsername,
    salt,
    verifier,
  );

  // client gets challenge B from server step1 and sends prove M1 to server
  const { A, M1 } = defaultClient.step2(salt, serverSession.B);

  t.throws(() => serverSession.step2(A, M1), /bad client credentials/i);
});
